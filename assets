<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width,initial-scale=1.0,maximum-scale=1.0,user-scalable=no" />
  <title>AR Router POC</title>
  <script src="https://aframe.io/releases/1.2.0/aframe.min.js"></script>
  <!-- AR.js for A-Frame (CDN) -->
  <script src="https://cdn.jsdelivr.net/gh/AR-js-org/AR.js@3.3.2/aframe/build/aframe-ar.js"></script>
  <style>
    body, html { margin:0; padding:0; height:100%; }
    #controls {
      position: fixed;
      left: 8px;
      right: 8px;
      bottom: 12px;
      display: flex;
      gap: 8px;
      justify-content: center;
      z-index: 999;
      pointer-events: auto;
    }
    button {
      padding: 12px 14px;
      font-size: 16px;
      border-radius: 8px;
      border: none;
      background: #007bff;
      color: white;
    }
    #status { position: fixed; left:8px; top:8px; background: rgba(0,0,0,0.6); color:white; padding:6px 10px; border-radius:6px; z-index:999; }
  </style>
</head>
<body>
  <div id="status">Ready</div>
  <div id="controls">
    <button id="btn-check-led">Mark "Check LED" Done</button>
    <button id="btn-replace-power">Mark "Replace Power Cable" Done</button>
  </div>

  <!-- A-Frame scene with AR.js -->
  <a-scene embedded arjs='trackingMethod: best; sourceType: webcam; debugUIEnabled: false;'>
    <!-- use preset marker 'hiro' (printable) -->
    <a-marker preset="hiro">
      <!-- Router model (place your glb file at assets/router_model.glb) -->
      <a-entity id="router" gltf-model="url(assets/router_model.glb)" scale="0.4 0.4 0.4" position="0 0 0"></a-entity>

      <!-- Example hotspot positioned on the model -->
      <a-sphere id="hotspot-led" position="0 0.12 0.3" radius="0.03" rotation="0 0 0" visible="true">
        <a-text value="LED" align="center" position="0 0.07 0" scale="4 4 4"></a-text>
      </a-sphere>
    </a-marker>

    <!-- Camera -->
    <a-entity camera></a-entity>
  </a-scene>

  <script>
    // Utility: read URL query param
    function getQueryParam(name) {
      const params = new URLSearchParams(location.search);
      return params.get(name);
    }

    const incidentSysId = getQueryParam('incident') || ''; // e.g. ?incident=... (optional)
    const SNOW_API = 'https://<your_instance>.service-now.com/api/x_ar/instructions'; // <-- replace
    // SECURITY NOTE: Do NOT embed real credentials in client-side code for production.
    const AUTH_PLACEHOLDER = 'Basic <BASE64_CREDENTIALS_OR_TOKEN>'; // <-- replace or use a proxy

    function setStatus(text) {
      document.getElementById('status').textContent = text;
    }

    async function markStepDone(stepName) {
      setStatus('Sending "' + stepName + '" to ServiceNow...');
      try {
        const payload = { incident_sys_id: incidentSysId, step: stepName };
        const res = await fetch(SNOW_API, {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': AUTH_PLACEHOLDER
          },
          body: JSON.stringify(payload),
        });
        if (!res.ok) throw new Error('HTTP ' + res.status);
        const json = await res.json();
        setStatus('Recorded: ' + stepName);
        console.log('ServiceNow response:', json);
      } catch (err) {
        console.error(err);
        setStatus('Failed to record step: ' + (err.message || err));
        alert('Error calling ServiceNow API. See console for details.');
      }
    }

    // Wire up UI buttons
    document.getElementById('btn-check-led').addEventListener('click', () => markStepDone('Check LED'));
    document.getElementById('btn-replace-power').addEventListener('click', () => markStepDone('Replace Power Cable'));

    // Make the AR hotspot clickable too (optional)
    document.querySelector('#hotspot-led').addEventListener('click', () => {
      markStepDone('Check LED (hotspot)');
    });

    // Friendly hint for missing incident id
    if (!incidentSysId) {
      setStatus('No incident id provided (optional). Use ?incident=<sys_id> in URL.');
    } else {
      setStatus('Incident: ' + incidentSysId);
    }
  </script>
</body>
</html>

